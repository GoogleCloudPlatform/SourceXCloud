#!/usr/bin/python
# Copyright 2015 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import getopt
import json
import os
import shutil
import subprocess
import sys
import tempfile

import readline
import code

from sxc import proclib
from sxc import extlib

image = json.load(sys.stdin)
source_dir = sys.argv[1]
opts, args = getopt.getopt(sys.argv[2:], 's:n', ['staging=', 'nodeploy'])
staging_dir = None
deploy = True
for opt, val in opts:
    if opt in ('-s', '--staging'):
        staging_dir = val
    elif opt in ('-n', '--nodeploy'):
        deploy = False
    else:
        extlib.error('Unknown option {} (value is {})'.format(opt, val))
        sys.exit(1)

# TODO: maybe manage the staging dir externally, this is likely to be fairly
# common.
if not staging_dir:
    staging_dir = tempfile.mkdtemp()
    delete_staging_dir = True
else:
    # Staging dir was provided by the user, they can manage it.
    delete_staging_dir = False

copied = []
result = {'type': 'result', 'staging_dir': staging_dir, 'deps': image['deps'],
          'copied': copied}
try:
    extlib.info('copying files')

    for file in image['files']:
        full_name = os.path.join(staging_dir, 'app', file)
        copied.append(full_name)

        # Create the directory if it doesn't exist.
        my_dir = os.path.dirname(full_name)
        if not os.path.exists(my_dir):
            os.makedirs(my_dir)

        # copy the file, resolving any symlinks.
        source_path = os.path.realpath(os.path.join(source_dir, file))
        if os.path.isfile(source_path):
            shutil.copyfile(source_path, full_name)

    # begin writing a dockerfile
    extlib.info('generating dockerfile')
    with open(os.path.join(staging_dir, 'Dockerfile'), 'w') as df:

        df.write("""FROM ubuntu
COPY app /app
RUN apt-get -y update && apt-get -y upgrade
""")

        # TODO: This needs to be abstracted out, we also need to deal with
        # versions.
        for dep in image['deps']:
            if dep['name'] == 'node.js':
                df.write('RUN apt-get install -y nodejs\n')
            elif dep['name'] == 'django':
                df.write('RUN apt-get install -y python-django\n')
            else:
                extlib.error('Unknown dependency {}'.format(dep['name']))

        for install_hook in image.get('on_install'):
            extlib.info('adding install hook: {}'.format(repr(install_hook)))
            df.write('RUN {}\n'.format(install_hook))

        df.write('CMD {}\n'.format(image['run']))

    # Write an app.yaml
    extlib.info('generating app.yaml')
    with open(os.path.join(staging_dir, 'app.yaml'), 'w') as ay:
        ay.write("""runtime: custom
version: 1
vm: true
api_version: 1
threadsafe: yes
handlers:
- url: .*
  script: dynamic
""")

    if deploy:

        def on_stdout(line):
            extlib.send_object({'type': 'info',
                                'message': 'gcloud: {}'.format(line)})

        def on_stderr(line):
            extlib.error('gcloud: {}'.format(line))

        proclib.run('gcloud', 'preview', 'app', 'deploy', staging_dir,
                    stdout_callback=on_stdout,
                    stderr_callback=on_stderr)

    extlib.send_object(result)

finally:
    if delete_staging_dir:
        shutil.rmtree(staging_dir)
